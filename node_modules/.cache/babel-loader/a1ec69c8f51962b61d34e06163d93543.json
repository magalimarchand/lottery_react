{"ast":null,"code":"import _regeneratorRuntime from \"/home/magali/lottery_react/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/magali/lottery_react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/magali/lottery_react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/magali/lottery_react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/magali/lottery_react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/magali/lottery_react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/magali/lottery_react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/magali/lottery_react/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport web3 from './web3';\nimport lottery from './lottery'; //start application: $ npm start (and url localhost:3001)\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      manager: '',\n      players: [],\n      balance: '',\n      value: '',\n      message: ''\n    };\n\n    _this.onSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                //event represente la submission du form\n                event.preventDefault(); //empeche le form de se submit lui-meme\n\n                _context.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context.sent;\n\n                //recupere les accounts pour la transaction\n                //envoi front-end d'un message  d'attente pour l'utilisateur\n                _this.setState({\n                  message: 'Waiting on transaction success...'\n                }); //envoyer une transaction avec la submission de l'utilisateur: ajout du compte dans la lottery\n\n\n                _context.next = 7;\n                return lottery.methods.enter().send({\n                  from: accounts[0],\n                  value: web3.utils.toWei(_this.state.value, 'ether')\n                });\n\n              case 7:\n                //envoi front-end d'un message  de succes pour l'utilisateur\n                _this.setState({\n                  message: 'You have been entered!'\n                });\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.onClick =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(event) {\n        var accounts, winner;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                event.preventDefault(); //empeche le form de se submit lui-meme\n\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n\n                _this.setState({\n                  message: 'Waiting on transaction success...'\n                }); //when we send a transaction, we get no return value back (never):\n                //So how to know who is the winner???\n\n\n                _context2.next = 7;\n                return lottery.methods.pickWinner().send({\n                  from: accounts[0]\n                });\n\n              case 7:\n                _context2.next = 9;\n                return lottery.methods.pickWinner();\n\n              case 9:\n                winner = _context2.sent;\n                console.log(winner);\n\n                _this.setState({\n                  message: 'A winner has been picked!'\n                });\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    //Recuperer le manager\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var manager, players, balance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return lottery.methods.manager().call();\n\n              case 2:\n                manager = _context3.sent;\n                _context3.next = 5;\n                return lottery.methods.getPlayers().call();\n\n              case 5:\n                players = _context3.sent;\n                _context3.next = 8;\n                return web3.eth.getBalance(lottery.options.address);\n\n              case 8:\n                balance = _context3.sent;\n                this.setState({\n                  manager: manager,\n                  players: players,\n                  balance: balance\n                });\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }() //Methode qui gere son propre this (arrow function), permet d'enregistrer un joueur\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      //web3.eth.getAccounts().then(console.log);\n      //ne pas oublier de se connecter a MetaMask pour que cela fonctionne!!!\n      return React.createElement(\"div\", {\n        style: {\n          margin: 60\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Lottery Contract\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"This contract is managed by \", this.state.manager, \". There are currently \", this.state.players.length, \" people entered, competing to win \", web3.utils.fromWei(this.state.balance, \"ether\"), \" ether !\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Want to try your luck ?\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Amount of ether to enter\"), React.createElement(\"input\", {\n        value: this.state.value,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            value: event.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Enter\")), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Ready to pick a winner?\"), React.createElement(\"button\", {\n        onClick: this.onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Pick a winner!\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, this.state.message));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/magali/lottery_react/src/App.js"],"names":["React","Component","web3","lottery","App","state","manager","players","balance","value","message","onSubmit","event","preventDefault","eth","getAccounts","accounts","setState","methods","enter","send","from","utils","toWei","onClick","pickWinner","winner","console","log","call","getPlayers","getBalance","options","address","margin","length","fromWei","target"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport web3 from './web3';\nimport lottery from './lottery';\n\n//start application: $ npm start (and url localhost:3001)\n\nclass App extends Component {\n\n  //Constructor\n  state = {\n    manager:'',\n    players:[],\n    balance:'',\n    value:'',\n    message:''\n  };\n\n  //Recuperer le manager\n  async componentDidMount(){\n\n    /*Quand on utilise le provider web3 de metamask, comme dans cette application,\n    on n'a pas besoin de specifier from:accounts[0], car il utilisera le compte \n    par defaut que l'on voit dans Metamask */\n    const manager = await lottery.methods.manager().call();\n\n    const players = await lottery.methods.getPlayers().call();\n\n    const balance = await web3.eth.getBalance(lottery.options.address);\n\n    this.setState({ manager, players, balance });\n  }\n\n  //Methode qui gere son propre this (arrow function), permet d'enregistrer un joueur\n  onSubmit = async (event)=>{ //event represente la submission du form\n\n    event.preventDefault(); //empeche le form de se submit lui-meme\n\n    const accounts = await web3.eth.getAccounts(); //recupere les accounts pour la transaction\n\n    //envoi front-end d'un message  d'attente pour l'utilisateur\n    this.setState({ message: 'Waiting on transaction success...'});\n\n    //envoyer une transaction avec la submission de l'utilisateur: ajout du compte dans la lottery\n    await lottery.methods.enter().send({\n      from: accounts[0],\n      value: web3.utils.toWei(this.state.value, 'ether')\n    });\n\n    //envoi front-end d'un message  de succes pour l'utilisateur\n    this.setState({ message: 'You have been entered!'});\n\n  };\n\n  //Methode qui permet de choisir un gagnant\n  onClick = async (event)=>{\n\n    event.preventDefault(); //empeche le form de se submit lui-meme\n\n    const accounts = await web3.eth.getAccounts();\n\n    this.setState({ message: 'Waiting on transaction success...'});\n\n    //when we send a transaction, we get no return value back (never):\n    //So how to know who is the winner???\n    await lottery.methods.pickWinner().send({\n      from:accounts[0]\n    });\n\n    //perso: display winner id\n    let winner = await lottery.methods.pickWinner();\n    console.log(winner);\n    this.setState({ message: 'A winner has been picked!'});\n  };\n\n  render() {\n\n   //web3.eth.getAccounts().then(console.log);\n   //ne pas oublier de se connecter a MetaMask pour que cela fonctionne!!!\n\n    return (\n\n     <div style={{ margin: 60 }}>\n       <h2>Lottery Contract</h2>\n       <p>\n          This contract is managed by {this.state.manager}\n          . There are currently {this.state.players.length} people entered, \n          competing to win {web3.utils.fromWei(this.state.balance, \"ether\")} ether !\n       </p>\n       <hr/>\n\n       <form onSubmit={this.onSubmit}>\n         <h4>Want to try your luck ?</h4>\n         <div>\n          <label>Amount of ether to enter</label>\n          <input \n            value={this.state.value}\n            onChange={event => this.setState({ value: event.target.value })}\n          />\n         </div>\n         <button>Enter</button>\n       </form>\n\n       <hr/>\n\n       <h4>Ready to pick a winner?</h4>\n       <button onClick={this.onClick}>Pick a winner!</button>\n\n       <hr/>\n\n       <h1>{this.state.message}</h1>\n \n     </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}